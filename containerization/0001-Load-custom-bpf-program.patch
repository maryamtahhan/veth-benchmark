From 26783963b7605acdac2256bef24212298bfeea9e Mon Sep 17 00:00:00 2001
From: Maryam Tahhan <mtahhan@redhat.com>
Date: Wed, 2 Aug 2023 07:23:14 -0400
Subject: [PATCH] Load custom bpf program

Hacky - Shouldn't do on a per port basis - need to just get the xskmap fd
Hacky implementation for POC... Should get back BPF Tool...

Signed-off-by: Maryam Tahhan <mtahhan@redhat.com>
---
 examples/cndpfwd/main.h          |   1 +
 examples/cndpfwd/parse-args.c    |   1 +
 examples/cnet-graph/parse-args.c |   1 +
 lib/core/xskdev/xskdev.c         | 111 ++++++++++++++++++++++++++++---
 lib/core/xskdev/xskdev.h         |  10 +--
 lib/include/cne_lport.h          |   2 +
 lib/usr/app/jcfg/jcfg.h          |  21 +++---
 lib/usr/app/jcfg/jcfg_lport.c    |   5 +-
 tools/cndp.schema                |  12 +++-
 9 files changed, 140 insertions(+), 24 deletions(-)

diff --git a/examples/cndpfwd/main.h b/examples/cndpfwd/main.h
index be9c2b5..9b5ddc8 100644
--- a/examples/cndpfwd/main.h
+++ b/examples/cndpfwd/main.h
@@ -129,6 +129,7 @@ struct fwd_port {
     uint64_t tx_overrun;                 /**< Number of mbufs failing to flush */
     struct acl_fwd_stats acl_stats;      /**< ACL-related stats */
     struct acl_fwd_stats prev_acl_stats; /**< previous values for ACL stats */
+    char bpf_prog_path[64];              /**< Custom BPF program path */
 };
 
 struct app_options {
diff --git a/examples/cndpfwd/parse-args.c b/examples/cndpfwd/parse-args.c
index c847156..c079523 100644
--- a/examples/cndpfwd/parse-args.c
+++ b/examples/cndpfwd/parse-args.c
@@ -218,6 +218,7 @@ process_callback(jcfg_info_t *j __cne_unused, void *_obj, void *arg, int idx)
             strlcpy(pcfg.pmd_name, lport->pmd_name, sizeof(pcfg.pmd_name));
             strlcpy(pcfg.ifname, lport->netdev, sizeof(pcfg.ifname));
             strlcpy(pcfg.name, lport->name, sizeof(pcfg.name));
+            strlcpy(pcfg.bpf_prog_path, lport->bpf_prog_path, sizeof(pcfg.bpf_prog_path));
 
             switch (f->pkt_api) {
             case XSKDEV_PKT_API:
diff --git a/examples/cnet-graph/parse-args.c b/examples/cnet-graph/parse-args.c
index 154e444..daa9cb4 100644
--- a/examples/cnet-graph/parse-args.c
+++ b/examples/cnet-graph/parse-args.c
@@ -159,6 +159,7 @@ process_callback(jcfg_info_t *j, void *_obj, void *arg, int idx)
             strlcpy(pcfg.pmd_name, lport->pmd_name, sizeof(pcfg.pmd_name));
             strlcpy(pcfg.ifname, lport->netdev, sizeof(pcfg.ifname));
             strlcpy(pcfg.name, lport->name, sizeof(pcfg.name));
+            strlcpy(pcfg.bpf_prog_path, lport->bpf_prog_path, sizeof(pcfg.bpf_prog_path));
 
             pd->lport = pktdev_port_setup(&pcfg);
             if (pd->lport < 0) {
diff --git a/lib/core/xskdev/xskdev.c b/lib/core/xskdev/xskdev.c
index b8d3e89..998a00c 100644
--- a/lib/core/xskdev/xskdev.c
+++ b/lib/core/xskdev/xskdev.c
@@ -720,6 +720,81 @@ xskdev_buf_set_buf_mgmt_ops(lport_buf_mgmt_t *dst, lport_buf_mgmt_t *src)
         memcpy(dst, src, sizeof(lport_buf_mgmt_t));
 }
 
+static int
+xskdev_load_custom_xdp_prog(const char *prog_path, int if_index, struct bpf_map **map, __u32 flags)
+{
+    int ret, prog_fd;
+    struct bpf_object *obj;
+    struct bpf_program *prog;
+    int err;
+
+    obj = bpf_object__open_file(prog_path, NULL);
+    if (!obj)
+        return -1;
+
+    prog = bpf_object__next_program(obj, NULL);
+    bpf_program__set_type(prog, BPF_PROG_TYPE_XDP);
+
+    err = bpf_object__load(obj);
+    if (err)
+        return -1;
+
+    prog_fd = bpf_program__fd(prog);
+    if (prog_fd < 0) {
+        CNE_ERR("Failed to load program %s\n", prog_path);
+        return -1;
+    }
+
+    /*
+     * The loaded program must provision for a map of xsks, such that some
+     * traffic can be redirected to userspace.
+     */
+    *map = bpf_object__find_map_by_name(obj, "xsks_map");
+    if (!*map) {
+        CNE_ERR("Failed to find xsks_map in %s\n", prog_path);
+        return -1;
+    }
+
+    /* Link the program with the given network device */
+    ret = bpf_xdp_attach(if_index, prog_fd, flags, NULL);
+    if (ret == -EEXIST && !(flags & XDP_FLAGS_UPDATE_IF_NOEXIST)) {
+        /* Force mode didn't work, probably because a program of the
+         * opposite type is loaded. Let's unload that and try loading
+         * again.
+         */
+
+        __u32 old_flags = flags;
+
+        flags &= ~XDP_FLAGS_MODES;
+        flags |= (old_flags & XDP_FLAGS_SKB_MODE) ? XDP_FLAGS_DRV_MODE : XDP_FLAGS_SKB_MODE;
+        ret = bpf_xdp_detach(if_index, 0, NULL);
+        if (!ret)
+            ret = bpf_xdp_attach(if_index, prog_fd, old_flags, NULL);
+    }
+    if (ret < 0) {
+        CNE_ERR("Failed to set prog fd %d on interface\n", prog_fd);
+        switch (-ret) {
+        case EBUSY:
+        case EEXIST:
+            CNE_ERR("Hint: XDP already loaded on device"
+                    " use --force to swap/replace\n");
+            break;
+        case EOPNOTSUPP:
+            CNE_ERR("Hint: Native-XDP not supported"
+                    " use --skb-mode or --auto-mode\n");
+            break;
+        default:
+            CNE_ERR("UNKOWN ERROR ret = %d\n", ret);
+            break;
+        }
+        return -1;
+    }
+
+    CNE_INFO("Successfully loaded XDP program %s with fd %d\n", prog_path, prog_fd);
+
+    return 0;
+}
+
 xskdev_info_t *
 xskdev_socket_create(struct lport_cfg *c)
 {
@@ -762,6 +837,26 @@ xskdev_socket_create(struct lport_cfg *c)
         CNE_DEBUG("xi->xsk_map_fd = %d\n", xi->xsk_map_fd);
     }
 
+    if (c->flags & LPORT_CUST_BPF_PROG) {
+        __u32 xdp_flags = 0;
+
+        if (!bpf_object__open_file(c->bpf_prog_path, NULL))
+            CNE_ERR_GOTO(err, "bpf_prog_path Not Valid");
+
+        xi->load_custom_bpf_prog = true;
+
+        xdp_flags &= ~XDP_FLAGS_MODES; /* Clear flags */
+        xdp_flags |= XDP_FLAGS_DRV_MODE;
+
+        // LOAD PROGRAM, get xi->xsk_map_fd
+        ret = xskdev_load_custom_xdp_prog(c->bpf_prog_path, if_index, &xi->xsk_map, xdp_flags);
+        if (ret) {
+            CNE_ERR_GOTO(err, "Failed to load_custom_xdp_prog\n");
+        }
+        cfg.libbpf_flags |= XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD;
+        xi->xsk_map_fd = bpf_map__fd(xi->xsk_map);
+    }
+
     if (xskdev_use_tx_lock) {
         ret = cne_mutex_create(&xi->tx_lock, 0);
         if (ret)
@@ -853,13 +948,13 @@ xskdev_socket_create(struct lport_cfg *c)
     xi->skb_mode     = (c->flags & LPORT_SKB_MODE) ? true : false;
     xi->shared_umem  = (c->flags & LPORT_SHARED_UMEM) ? true : false;
 
-    xi->xdp_flags    = XDP_FLAGS_UPDATE_IF_NOEXIST;
-    xi->xdp_flags    = ((xi->skb_mode) ? XDP_FLAGS_SKB_MODE : XDP_FLAGS_DRV_MODE) | xi->xdp_flags;
-    cfg.xdp_flags    = xi->xdp_flags;
-    cfg.bind_flags   = (xi->skb_mode) ? XDP_COPY | XDP_USE_NEED_WAKEUP : XDP_USE_NEED_WAKEUP;
-    cfg.rx_size      = c->rx_nb_desc;
-    cfg.tx_size      = c->tx_nb_desc;
-    cfg.libbpf_flags = xi->unprivileged ? XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD : 0;
+    xi->xdp_flags  = XDP_FLAGS_UPDATE_IF_NOEXIST;
+    xi->xdp_flags  = ((xi->skb_mode) ? XDP_FLAGS_SKB_MODE : XDP_FLAGS_DRV_MODE) | xi->xdp_flags;
+    cfg.xdp_flags  = xi->xdp_flags;
+    cfg.bind_flags = (xi->skb_mode) ? XDP_COPY | XDP_USE_NEED_WAKEUP : XDP_USE_NEED_WAKEUP;
+    cfg.rx_size    = c->rx_nb_desc;
+    cfg.tx_size    = c->tx_nb_desc;
+    cfg.libbpf_flags |= xi->unprivileged ? XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD : 0;
 
     if (xi->busy_polling) {
         xi->busy_budget  = (c->busy_budget) ? c->busy_budget : AF_XDP_DFLT_BUSY_BUDGET;
@@ -892,7 +987,7 @@ xskdev_socket_create(struct lport_cfg *c)
     xi->txq.fds.fd     = xsk_socket__fd(xi->rxq.xsk);
     xi->txq.fds.events = POLLIN;
 
-    if (xi->unprivileged) {
+    if (xi->unprivileged || xi->load_custom_bpf_prog) {
         ret = xsk_socket__update_xskmap(xi->rxq.xsk, xi->xsk_map_fd);
         if (ret)
             CNE_ERR_GOTO(err, "Update of BPF map failed. %s\n", strerror(errno));
diff --git a/lib/core/xskdev/xskdev.h b/lib/core/xskdev/xskdev.h
index 73592cb..e5b0d3b 100644
--- a/lib/core/xskdev/xskdev.h
+++ b/lib/core/xskdev/xskdev.h
@@ -118,13 +118,15 @@ typedef struct xskdev_info {
     uint32_t busy_budget;          /**< Busy polling budget value */
     uds_info_t *uds_info;          /**< UDS info struct */
     int xsk_map_fd;                /**< xsk map file descriptor from UDS */
+    struct bpf_map *xsk_map;
 
     /* byte flags to mirror the lport_cfg_t.flags bits */
     bool unprivileged; /**< Inhibit privileged ops (BPF program load & config of busy poll) */
-    bool needs_wakeup; /**< Force the lport to use wakeup calls */
-    bool skb_mode;     /**< Force lport to use SKB Copy mode */
-    bool busy_polling; /**< Enable the lport to use busy polling if available */
-    bool shared_umem;  /**< Enable Shared UMEM support */
+    bool load_custom_bpf_prog; /**< load a custom BPF program) */
+    bool needs_wakeup;         /**< Force the lport to use wakeup calls */
+    bool skb_mode;             /**< Force lport to use SKB Copy mode */
+    bool busy_polling;         /**< Enable the lport to use busy polling if available */
+    bool shared_umem;          /**< Enable Shared UMEM support */
 
     lport_buf_mgmt_t buf_mgmt; /**< Buffer management routines structure */
     xskdev_get_mbuf_addr_tx_t
diff --git a/lib/include/cne_lport.h b/lib/include/cne_lport.h
index d952a0d..ed8df09 100644
--- a/lib/include/cne_lport.h
+++ b/lib/include/cne_lport.h
@@ -87,6 +87,7 @@ typedef struct lport_cfg {
     void *xsk_uds;                 /**< The UDS to connect to get xsk FDs */
     char *xsk_map_path;            /**< The pinned map to get xsk FD */
     lport_buf_mgmt_t buf_mgmt;     /**< Buffer management functions */
+    char bpf_prog_path[64];
 } lport_cfg_t;
 
 /**< lport_cfg.flags configuration bits */
@@ -97,6 +98,7 @@ typedef struct lport_cfg {
 #define LPORT_SHARED_UMEM            (1 << 4) /**< Enable UMEM Shared mode if available */
 #define LPORT_USER_MANAGED_BUFFERS   (1 << 5) /**< Enable Buffer Manager outside of CNDP */
 #define LPORT_UMEM_UNALIGNED_BUFFERS (1 << 6) /**< Enable unaligned frame UMEM support */
+#define LPORT_CUST_BPF_PROG          (1 << 7)
 
 typedef struct lport_stats {
     uint64_t ipackets;           /**< Total number of successfully received packets. */
diff --git a/lib/usr/app/jcfg/jcfg.h b/lib/usr/app/jcfg/jcfg.h
index 0102e1e..19fbb59 100644
--- a/lib/usr/app/jcfg/jcfg.h
+++ b/lib/usr/app/jcfg/jcfg.h
@@ -41,15 +41,16 @@ struct json_object;
 /**
  * The standard list of section names used in  JCFG json-c files.
  */
-#define APP_TAG         "application"
-#define DEFAULT_TAG     "defaults"
-#define OPTION_TAG      "options"
-#define UMEM_TAG        "umems"
-#define LPORT_TAG       "lports"
-#define LGROUP_TAG      "lcore-groups"
-#define THREAD_TAG      "threads"
-#define LPORT_GROUP_TAG "lport-groups"
-#define USER_TAG        "users"
+#define APP_TAG             "application"
+#define DEFAULT_TAG         "defaults"
+#define OPTION_TAG          "options"
+#define UMEM_TAG            "umems"
+#define LPORT_TAG           "lports"
+#define LGROUP_TAG          "lcore-groups"
+#define THREAD_TAG          "threads"
+#define LPORT_GROUP_TAG     "lport-groups"
+#define USER_TAG            "users"
+#define CUSTOM_BPF_PROG_TAG "custom-bpf-prog"
 
 /**
  * Macro to initialize a const char *tags[] type array for indexing with jcfg_tag_t.
@@ -173,6 +174,7 @@ typedef struct jcfg_lport {
     uint16_t busy_budget;        /**< busy budget 0xFFFF disabled, 0 use default, >0 budget */
     uint16_t flags;     /**< Flags to configure lport in lport_cfg_t.flags in cne_lport.h */
     char *xsk_map_path; /**< The path to the pinned xsk_map for this port */
+    char *bpf_prog_path;
 } jcfg_lport_t;
 
 /** JCFG lport configuration names */
@@ -189,6 +191,7 @@ typedef struct jcfg_lport {
 #define JCFG_PINNED_XSK_MAP_NAME     "xsk_pin_path"
 #define JCFG_LPORT_FORCE_WAKEUP_NAME "force_wakeup"
 #define JCFG_LPORT_SKB_MODE_NAME     "skb_mode"
+#define JCFG_CUST_BPF_PROG_NAME      "custom_bpf_prog"
 
 /**
  * JCFG  lgroup for lcore allocations
diff --git a/lib/usr/app/jcfg/jcfg_lport.c b/lib/usr/app/jcfg/jcfg_lport.c
index f1b3b89..04895ee 100644
--- a/lib/usr/app/jcfg/jcfg_lport.c
+++ b/lib/usr/app/jcfg/jcfg_lport.c
@@ -92,7 +92,10 @@ _lport(struct json_object *obj, int flags, struct json_object *parent __cne_unus
         else if (!strncmp(key, JCFG_LPORT_DESC_NAME, keylen) ||
                  !strncmp(key, JCFG_LPORT_DESCRIPTION_NAME, keylen))
             lport->desc = strdup(json_object_get_string(obj));
-        else if (!strncmp(key, JCFG_LPORT_BUSY_TIMEOUT_NAME, keylen)) {
+        else if (!strncmp(key, JCFG_CUST_BPF_PROG_NAME, keylen)) {
+            lport->bpf_prog_path = strndup(json_object_get_string(obj), JCFG_MAX_STRING_SIZE);
+            lport->flags |= LPORT_CUST_BPF_PROG;
+        } else if (!strncmp(key, JCFG_LPORT_BUSY_TIMEOUT_NAME, keylen)) {
             int val;
 
             val = json_object_get_int(obj);
diff --git a/tools/cndp.schema b/tools/cndp.schema
index 8769c56..1f7ee39 100644
--- a/tools/cndp.schema
+++ b/tools/cndp.schema
@@ -161,7 +161,11 @@
                             "description": "Enable XDP_FLAGS_SKB_MODE to force copy mode",
                             "type": "boolean",
                             "default": false
-                        }
+                        },
+                        "custom_bpf_prog": {
+                            "description": "The custom bpf program to load",
+                            "type": "string"
+                         }
                     },
                     "patternProperties": {
                         "^desc(ription){0,1}$": {
@@ -334,7 +338,11 @@
                         "description": "Enable XDP_FLAGS_SKB_MODE to force copy mode",
                         "type": "boolean",
                         "default": false
-                    }
+                        },
+                        "custom_bpf_prog": {
+                            "description": "The custom bpf program to load",
+                            "type": "string"
+                         }
                 },
                 "patternProperties": {
                     "^desc(ription){0,1}$": {
-- 
2.41.0

